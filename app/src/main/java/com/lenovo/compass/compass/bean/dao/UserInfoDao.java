package com.lenovo.compass.compass.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ksyun.android.ddlive.bean.business.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property AvatarUrl = new Property(3, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property UserSex = new Property(4, int.class, "userSex", false, "USER_SEX");
        public final static Property IsAnchor = new Property(5, boolean.class, "isAnchor", false, "IS_ANCHOR");
        public final static Property AnchorRoomId = new Property(6, int.class, "anchorRoomId", false, "ANCHOR_ROOM_ID");
        public final static Property YunpiaoNum = new Property(7, int.class, "yunpiaoNum", false, "YUNPIAO_NUM");
        public final static Property ConcernNum = new Property(8, int.class, "concernNum", false, "CONCERN_NUM");
        public final static Property ConcernedNum = new Property(9, int.class, "concernedNum", false, "CONCERNED_NUM");
        public final static Property HistoryPlayNum = new Property(10, int.class, "historyPlayNum", false, "HISTORY_PLAY_NUM");
        public final static Property UserPos = new Property(11, int.class, "userPos", false, "USER_POS");
        public final static Property UserAbstract = new Property(12, String.class, "userAbstract", false, "USER_ABSTRACT");
        public final static Property Level = new Property(13, int.class, "level", false, "LEVEL");
        public final static Property UserMoney = new Property(14, int.class, "userMoney", false, "USER_MONEY");
        public final static Property UserThumbnail = new Property(15, String.class, "userThumbnail", false, "USER_THUMBNAIL");
        public final static Property UserDiamond = new Property(16, int.class, "userDiamond", false, "USER_DIAMOND");
        public final static Property UserCharm = new Property(17, int.class, "userCharm", false, "USER_CHARM");
        public final static Property UserExperience = new Property(18, int.class, "userExperience", false, "USER_EXPERIENCE");
        public final static Property UserInvest = new Property(19, int.class, "userInvest", false, "USER_INVEST");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USER_NAME\" TEXT NOT NULL ," + // 2: userName
                "\"AVATAR_URL\" TEXT NOT NULL ," + // 3: avatarUrl
                "\"USER_SEX\" INTEGER NOT NULL ," + // 4: userSex
                "\"IS_ANCHOR\" INTEGER NOT NULL ," + // 5: isAnchor
                "\"ANCHOR_ROOM_ID\" INTEGER NOT NULL ," + // 6: anchorRoomId
                "\"YUNPIAO_NUM\" INTEGER NOT NULL ," + // 7: yunpiaoNum
                "\"CONCERN_NUM\" INTEGER NOT NULL ," + // 8: concernNum
                "\"CONCERNED_NUM\" INTEGER NOT NULL ," + // 9: concernedNum
                "\"HISTORY_PLAY_NUM\" INTEGER NOT NULL ," + // 10: historyPlayNum
                "\"USER_POS\" INTEGER NOT NULL ," + // 11: userPos
                "\"USER_ABSTRACT\" TEXT NOT NULL ," + // 12: userAbstract
                "\"LEVEL\" INTEGER NOT NULL ," + // 13: level
                "\"USER_MONEY\" INTEGER NOT NULL ," + // 14: userMoney
                "\"USER_THUMBNAIL\" TEXT NOT NULL ," + // 15: userThumbnail
                "\"USER_DIAMOND\" INTEGER NOT NULL ," + // 16: userDiamond
                "\"USER_CHARM\" INTEGER NOT NULL ," + // 17: userCharm
                "\"USER_EXPERIENCE\" INTEGER NOT NULL ," + // 18: userExperience
                "\"USER_INVEST\" INTEGER NOT NULL );"); // 19: userInvest
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getUserName());
        stmt.bindString(4, entity.getAvatarUrl());
        stmt.bindLong(5, entity.getUserSex());
        stmt.bindLong(6, entity.getIsAnchor() ? 1L: 0L);
        stmt.bindLong(7, entity.getAnchorRoomId());
        stmt.bindLong(8, entity.getYunpiaoNum());
        stmt.bindLong(9, entity.getConcernNum());
        stmt.bindLong(10, entity.getConcernedNum());
        stmt.bindLong(11, entity.getHistoryPlayNum());
        stmt.bindLong(12, entity.getUserPos());
        stmt.bindString(13, entity.getUserAbstract());
        stmt.bindLong(14, entity.getLevel());
        stmt.bindLong(15, entity.getUserMoney());
        stmt.bindString(16, entity.getUserThumbnail());
        stmt.bindLong(17, entity.getUserDiamond());
        stmt.bindLong(18, entity.getUserCharm());
        stmt.bindLong(19, entity.getUserExperience());
        stmt.bindLong(20, entity.getUserInvest());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.getString(offset + 2), // userName
            cursor.getString(offset + 3), // avatarUrl
            cursor.getInt(offset + 4), // userSex
            cursor.getShort(offset + 5) != 0, // isAnchor
            cursor.getInt(offset + 6), // anchorRoomId
            cursor.getInt(offset + 7), // yunpiaoNum
            cursor.getInt(offset + 8), // concernNum
            cursor.getInt(offset + 9), // concernedNum
            cursor.getInt(offset + 10), // historyPlayNum
            cursor.getInt(offset + 11), // userPos
            cursor.getString(offset + 12), // userAbstract
            cursor.getInt(offset + 13), // level
            cursor.getInt(offset + 14), // userMoney
            cursor.getString(offset + 15), // userThumbnail
            cursor.getInt(offset + 16), // userDiamond
            cursor.getInt(offset + 17), // userCharm
            cursor.getInt(offset + 18), // userExperience
            cursor.getInt(offset + 19) // userInvest
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUserName(cursor.getString(offset + 2));
        entity.setAvatarUrl(cursor.getString(offset + 3));
        entity.setUserSex(cursor.getInt(offset + 4));
        entity.setIsAnchor(cursor.getShort(offset + 5) != 0);
        entity.setAnchorRoomId(cursor.getInt(offset + 6));
        entity.setYunpiaoNum(cursor.getInt(offset + 7));
        entity.setConcernNum(cursor.getInt(offset + 8));
        entity.setConcernedNum(cursor.getInt(offset + 9));
        entity.setHistoryPlayNum(cursor.getInt(offset + 10));
        entity.setUserPos(cursor.getInt(offset + 11));
        entity.setUserAbstract(cursor.getString(offset + 12));
        entity.setLevel(cursor.getInt(offset + 13));
        entity.setUserMoney(cursor.getInt(offset + 14));
        entity.setUserThumbnail(cursor.getString(offset + 15));
        entity.setUserDiamond(cursor.getInt(offset + 16));
        entity.setUserCharm(cursor.getInt(offset + 17));
        entity.setUserExperience(cursor.getInt(offset + 18));
        entity.setUserInvest(cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
